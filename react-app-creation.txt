npx create-react-app admin-app
npm install --save react-bootstrap bootstrap
npm install --save react-router-dom

Playlists: https://www.youtube.com/watch?v=tvdFYmJEaw4&list=PLB_Wd4-5SGAYsxD4JGaVdXll3PnoyI-AM&index=1

Steps:
1. first install node LTS version from nodejs.org
2. VS Code
3. Postman tool
4. Gitbash
5. create a folder(my-ecommerce) and 3 subfolders 1. mern-back-end,  2. admin-app, 3. ecommerce-front-end 
6. Now go into mern-back-end directory
**************  *****************************
7. Go inside the folder mern-back-end:
a. npm init (couple of question swill come untill successfull)
b. npm install --save express express-validator mongoose 
c. create a folder "src" at root level and inside that create a file index.js|server.js|index.server.js to create a server first
d. create a .env file at root level and define a varibale a PORT number in which hte server will run say 2000/9000 etc
e. npm install --save dotenv
f. check if the server port is running as node src/index.server.js
g. create two routes one for get and another post for sample check
h. npm install --save-dev nodemon   to keep running all time go to package.json scripts block and remove the test and add below line 
"start": "nodemon ./src/index.server.js" after that once you call "npm start" it will continue running on the server 
i. npm install --save body-parser  for pass the json data instead of // app.use(express.json());
j. now create the mongo db database in atlas mongo  [u: mrinsss p: p2NOZaB8edIZbwnK ] mongodb+srv://mrinsss:<password>@cluster0.h74o8.mongodb.net/<dbname>?retryWrites=true&w=majority and connect with mongoose connection
k. define db config in env file and pull in app file
l. to maintain structure in express its an unopinion framework but we will make a certain structure. for that create routes, models, controllers folders inside src. routes=> for api defn, models => database design defn , controllers => logic defn 
m. create first api routes in user.js for signin
n. import this routes in your server file. Now we need a middleware to manipualte data between sending and receiving 
o. now create a model for user using mongoose Schema and export it for use. also for password virtual field in monggose as in user model 
p. for password use bcrypt pacakge: npm install --save bcrypt
Note: throw new MongooseError('Query.prototype.exec() no longer accepts a callback');
q.now the signup api is implemented using models / routes / controllers .
r. now use the json web token for authenticate in case of sign in npm install --save jsonwebtoken
s. also required signin middleware to verify token method written in auth controller 
t. now create the same signup signin for admin type and for that create admin folder under controllers and routes 
*********************** **************************
8. Go inside the root folder and create a react application for admin application also using React command: npx create-react-app admin-app
now we will do some settings as efault port will be 3000 but we will make 4000 as port inside pacakge.json file under scripts block start part as like, set PORT 4000 && react-scripts-start 
a. we will use bootstrap react library for admin app layout design. https://react-bootstrap.netlify.app/docs/getting-started/introduction
b. npm install react-bootstrap bootstrap --save 
c. npm install --save react-router-dom
d. clean the app.js file remove the html under app class also logo.svg file. clean app.css but you can keep the file and add some css inside index.css include some fonts from fonts.google.com also change the title from public/index.html and add the fonts below the title tag also add the css cdn link from bootstrap.
e. create folders inside the src folder i. components - Layout ii. containers
f. create a file index.js inside Layout folder and type rafce as short key to generate a functional component. [install vs code plugin react-snippets]
g. now create some pages. Home/Signin/Signup inside the containers first. and index pages insdide those.
h. now use react router dom in App.js file help: https://stackoverflow.com/questions/69843615/switch-is-not-exported-from-react-router-dom 
import { BrowserRouter,  Routes, // instead of "Switch"  Route, } from "react-router-dom";
add following inside app class div.
      <Router>
        <Routes>
          <Route path="/" Component={Home} />
          <Route path="/signin" Component={Signin} />
          <Route path="/signup" Component={Signup} />
        </Routes>
      </Router>
i. Now go to Header component and signin signup link using react router dom instead of using Nav of bootstrap. import { NavLink, Link } from 'react-router-dom';
j. now add Layout component in signin and signup page to get the same header as home page 
k. now go to bootstrap forms for signin page
l. Now lets create a generic compoent for Input type field which can be used anywhere. we will do it inside components/UI/Input/index.js file





