npx create-react-app admin-app
npm install --save react-bootstrap bootstrap
npm install --save react-router-dom

Github Links
Back End Source Code
github.com/Rizwan17/ecommerce-back-end-rest-server.git

Admin App Source Code
github.com/Rizwan17/ecommerce-admin-app.git

Flipkart Clone
github.com/Rizwan17/ecommerce-flipkart-clone.git

Playlists: https://www.youtube.com/watch?v=tvdFYmJEaw4&list=PLB_Wd4-5SGAYsxD4JGaVdXll3PnoyI-AM&index=1
Ep-01: Mern Stack Project | Ecommerce Website | Flipkart Clone
Ep-02: Mern Stack Project | Ecommerce Website | Flipkart Clone User And Admin Rest Api
Ep-03: Mern Stack Project | Ecommerce Flipkart Clone | Admin Login Rest Api
Ep-04: Mern Stack Project | Ecommerce Website | Admin App Layout Setup
Ep-05: Mern Stack Project | Ecommerce Website | Api Request Validation
Ep-06: Mern Stack Project | Ecommerce Website | Categories and Sub Categories Rest Api
Ep-07: MERN Stack Project | Ecommerce Website | Product Creation Api
Ep-08: MERN Stack Project | Ecommerce Website | Add product to cart api
Ep-09: MERN Stack Project | Ecommerce Website | Fix Cart Api & Update Category Api
Ep-10: MERN Stack Project | Ecommerce Website | Admin Redux Store Setup

Steps:
1. first install node LTS version from nodejs.org
2. VS Code
3. Postman tool
4. Gitbash
5. create a folder(my-ecommerce) and 3 subfolders 1. mern-back-end,  2. admin-app, 3. ecommerce-front-end 
6. Now go into mern-back-end directory
**************  *****************************
7. Go inside the folder mern-back-end:
a. npm init (couple of question swill come untill successfull)
b. npm install --save express express-validator mongoose 
c. create a folder "src" at root level and inside that create a file index.js|server.js|index.server.js to create a server first
d. create a .env file at root level and define a varibale a PORT number in which hte server will run say 2000/9000 etc
e. npm install --save dotenv
f. check if the server port is running as node src/index.server.js
g. create two routes one for get and another post for sample check
h. npm install --save-dev nodemon   to keep running all time go to package.json scripts block and remove the test and add below line 
"start": "nodemon ./src/index.server.js" after that once you call "npm start" it will continue running on the server 
i. npm install --save body-parser  for pass the json data instead of // app.use(express.json());
j. now create the mongo db database in atlas mongo  [u: mrinsss p: p2NOZaB8edIZbwnK ] mongodb+srv://mrinsss:<password>@cluster0.h74o8.mongodb.net/<dbname>?retryWrites=true&w=majority and connect with mongoose connection
k. define db config in env file and pull in app file
l. to maintain structure in express its an unopinion framework but we will make a certain structure. for that create routes, models, controllers folders inside src. routes=> for api defn, models => database design defn , controllers => logic defn 
m. create first api routes in user.js for signin
n. import this routes in your server file. Now we need a middleware to manipualte data between sending and receiving 
o. now create a model for user using mongoose Schema and export it for use. also for password virtual field in monggose as in user model 
p. for password use bcrypt pacakge: npm install --save bcrypt
Note: throw new MongooseError('Query.prototype.exec() no longer accepts a callback');
q.now the signup api is implemented using models / routes / controllers .
r. now use the json web token for authenticate in case of sign in npm install --save jsonwebtoken
s. also required signin middleware to verify token method written in auth controller 
t. now create the same signup signin for admin type and for that create admin folder under controllers and routes 
*********************** **************************
8. Go inside the root folder and create a react application for admin application also using React command: npx create-react-app admin-app
now we will do some settings as efault port will be 3000 but we will make 4000 as port inside pacakge.json file under scripts block start part as like, set PORT 4000 && react-scripts-start 
a. we will use bootstrap react library for admin app layout design. https://react-bootstrap.netlify.app/docs/getting-started/introduction
b. npm install react-bootstrap bootstrap --save 
c. npm install --save react-router-dom
d. clean the app.js file remove the html under app class also logo.svg file. clean app.css but you can keep the file and add some css inside index.css include some fonts from fonts.google.com also change the title from public/index.html and add the fonts below the title tag also add the css cdn link from bootstrap.
e. create folders inside the src folder i. components - Layout ii. containers
f. create a file index.js inside Layout folder and type rafce as short key to generate a functional component. [install vs code plugin react-snippets]
g. now create some pages. Home/Signin/Signup inside the containers first. and index pages insdide those.
h. now use react router dom in App.js file help: https://stackoverflow.com/questions/69843615/switch-is-not-exported-from-react-router-dom 
import { BrowserRouter,  Routes, // instead of "Switch"  Route, } from "react-router-dom";
add following inside app class div.
      <Router>
        <Routes>
          <Route path="/" Component={Home} />
          <Route path="/signin" Component={Signin} />
          <Route path="/signup" Component={Signup} />
        </Routes>
      </Router>
i. Now go to Header component and signin signup link using react router dom instead of using Nav of bootstrap. import { NavLink, Link } from 'react-router-dom';
j. now add Layout component in signin and signup page to get the same header as home page 
k. now go to bootstrap forms for signin page
l. Now lets create a generic compoent for Input type field which can be used anywhere. we will do it inside components/UI/Input/index.js file
******************** ***************************
9. Go inside the folder mern-back-end:
a. express-validator add in auth.js file like const { check } = require("express-validator"); help https://express-validator.github.io/docs/api/check
b. now in controller add validation result. and for that create a seperate file for validtors as a middleware like validateSigninRequest, validateSignupRequest, isRequestValidated. create a file src/validators/auth.js 
c. little bit of code cleaning like requireSignin used in both controllers in admin/auth.js and auth.js (though it is not used in now) we will do it in a common file. so create a folder common-middleware
d. also remove body-parser as express already have it as express.json()
e. Now move to Categories / Sub-Categories Rest API. Create a model for category first. then create category route. then for slug install new pacakge as command npm install --save slugify
f. now add the authentication as only loggedin admin can create category inside common middleware
g. now write a recursive function to fetch the categoeirs inside category controller called "genRecursiveCategory" when category list API calling is made.
h. now wok with product creation rest apis. We need multer package for image uploads "npm install --save multer" and also shortid for file name "npm install --save shortid"
i. create uploads/product folder inside src folder path 
k. things to remember in case of using multer are below.
#######
const multer  = require('multer');
const shortid = require('shortid');
const path = require('path');
const multerStorage = multer.diskStorage({
    destination: function (req, file, cb) {
        // cb(null, '../../uploads/product')
        cb(null, path.join(path.dirname(__dirname), 'uploads/product'))
    },
    filename: function (req, file, cb) {
        // const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
        // cb(null, file.fieldname + '-' + uniqueSuffix)
        cb(null, shortid.generate() + '-'  + Math.round(Math.random() * 1E9) + '-' + file.originalname)
    }
});
const uploadPicMiddle = multer({ storage: multerStorage });
uploadPicMiddle.array('productPicture') or uploadPicMiddle.single('productPicture') can be used as middlewares
#######

l. Now we have to create the product cart APIs, for that we have to create cart models, routes and controllers as well.
m. add cart model and controllers and route 
n. we have to fix one problem: one user one cart and multiple products
o. we have to fix one problem:modify the cart so that when same item is added only the price and quantity got increased
p. we have to fix one problem: cart get resetted by third time product changes happens
-- ---
q. now again go back to category model to take image for any category and update in that case. Add image category
r. as the public folder are not exposed we have to add some middleware or path library methods in server.js for that
---- --------------------------------------- ------------------------------ --------------------------------------------
10. We will have to create signup and signin methods for admin users. (Go inside of admin-app folder) Redux-Store Setup:
a. we will do it through Redux store management so that it can be handled easily. so lets try to install the required packages for this. following commands
npm install --save redux react-redux redux-thunk 
with the help of redux we can create the stores. 
with the help react-redux we can connect our components with the store so we can access the information from the store.
with the help redux-thunk we can make api calls asynchronously.
b. create a new folder for the store management inside src called 'store' and 'actions' and 'reducers'
c. inside store create index.js for creating a store and export default it
import { legacy_createStore as createStore} from 'redux'; -- 4.2 version and above createStore deprecated
d. import { Provider } from 'react-redux'; inside index.js file of root path where the app.js is kept and wrap your whole application inside the provider tag like below:
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider>
    <React.StrictMode>
      <App />
    </React.StrictMode>
  </Provider>
);
e. then pass the store as props to the Provider also import the store from its path like: import store from './store'; and attach a window object before pass the store so taht we can access it in browser like: window.store = store;
  <Provider store={store}>
    <React.StrictMode>
      <App />
    </React.StrictMode>
  </Provider>
 
f. now in developer tools console tab type window.store, window.store.getState() 
g. now inside the reducers folder create a file index.js export default () => {} which is the function in store and use there like below.
import rootReducer from '../reducers';
const store =  createStore(rootReducer);
h. now in rootReducer function takes two arguments i.e. Initial States & Actions
i. now create a index.js & constants.js file within the actions folder. Now for authentication we will create a file auth.actions.js inside this and write auth actions below:
export const login = (user)=>{
    return (dispatch) => {
        
    }
}
j. Now write an action here for login and write a sample action constant inside constants.js file
export const authConstants = {
    LOGIN_REQUEST: 'LOGIN_REQUEST'
}
k. inside auth.constants.js use this action to dispatch
import { authConstants } from "./constants";

export const login = (user)=>{
    return async (dispatch) => {
        dispatch({
            type: authConstants.LOGIN_REQUEST,
            payload: {
                // login: true
				...user
            }

        });
    }
}
l. export everything from actions/index.js and use it in signin/index.js inside the containers.
m. on form submit execute the login function import from actions like below: 
import { login } from '../../actions';

<Form onSubmit={userLogin}>, then define the userLogin inside the Signin before the return like below:
  const userLogin = (e) => {
	e.preventDefault();
    const userObj = {
      email: 'mrinsss@gmail.com',
      password: '123456'
    }
    // execute the login fn
    login(userObj);
  }

n. inside the reducers folder create a file auth.reducers.js and write following codes.
import { authConstants } from "../actions/constants";
const initState = {
    name: 'Mrinmoy'
}

export default (state = initState, action ) => {
    // return state;
    switch(action.type) {
        case authConstants.LOGIN_REQUEST:
            state = {
                ...state
            }
            break;
    }

    return state;
}
n.  now inside reducers/index.js file 
import authReducers from "./auth.reducers";
import { combineReducers } from 'react-redux';

const rootReducer = combineReducers({
    auth: authReducers
});

export default rootReducer;
o. now this will not wrok. for this we have to use a hook useDispatch from Signin/index.js like below.
import { useDispatch } from 'react-redux';
.....
const dispatch = useDispatch();
.......
dispatch(login(userObj));  

p. you will get a error: Actions must be plain objects. Instead, the actual type was: 'function'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. To reoslve this go to store/index.js and use the thunk middleware as said.
import { applyMiddleware, legacy_createStore as createStore} from 'redux';
import rootReducer from '../reducers';
import thunk from 'redux-thunk';

const store =  createStore(rootReducer, applyMiddleware(thunk) );

export default store;
q. 

-- ------------------ -
11. Now we setup Admin authentication Login and private Routes.
a. Create a folder call helpers for API calls and install the axios pckg by command: npm i --save axios, and inside the helpers create a file axios.js to centralized the API call so that we can change the call if needed in one shot from here by using this instance of axios. also create a new file urlConfig.js inside src folder where we can define the varibales. like export const apiBaseUrl = 'http://localhost:5000 and in helpers/axios.js file write below
import axios from 'axios';
import { apiBaseUrl } from '../urlConfig';

const axiosInstance = axios.create({
    baseURL: apiBaseUrl,
    // headers: {
    //     Authorization: ''
    // }
});

export default axiosInstance;

b. now to make an api call for login go to actions/auth.actions.js file and before return the dispatch call the api using axios instance.
c. create couple of state using useState hook in Signin/index so that the input varibale got connected for api calls like added the following in its proper place.
const [email, setEmail] = useState();
value={email}
onChange={(e) => setEmail(e.target.value)}
d. now go to auth.actions.js and call the api now you will get blocked block cors policy so you backend permission need to be allowed by allowing cors by using: npm i cors --save also add in the index.server.js file const cors = require('cors'); and const cors = require('cors');
e. now make couple of constants for auth like LOGIN_FAILURE, LOGIN_SUCCESS and in actions/auth.actions.js file disptach the action before the api call. dispatch({type: authConstants.LOGIN_REQUEST});
f. now in reducers/auth.reducers.js add some states for user for authenticate and also add in switch cases.
g. now for private routes we will create higher order component inside a folder src/HOC/PrivateRoute.js like below: 
import React from "react";
import { Route, Navigate, Outlet } from "react-router-dom";
const PrivateRoute = () => {
    const token = window.localStorage.getItem('token');
    return token ? <Outlet /> : <Navigate to="/signin" />;
}
export default PrivateRoute;
Home page is private route but the signup/sigin page is public route so we have to define the home page route as private route. inside src\App.js like below:
<Route exact path='/' element={<PrivateRoute/>}>
	<Route exact path='/' element={<Home/>}/>
</Route>

h. now in signin js useSelector() to get the store state value. const auth = useSelector(state => state.auth); and below navigate to dashboard after login by code:
  if( auth.authenticate ) {
    return <Navigate to={'/'} />
  }
i. Now if we reload the page we loose the auth persisitent. we hve to fix it. to do this we have to return one more action isUserLoggedIn as below:

export const isUserLoggedIn = () => {
    return async (dispatch) => {
        const token = localStorage.getItem('token');
        if( token ) {
            dispatch({
                payload:{
                    token
                }
            });
        }
        else 
        {
            dispatch({
                payload:{
                    authenticate: false,
                    message: "User need to login"
                }
            });
        }
    }
}

j. now got to signin page and use this 

-- ---------------------





.